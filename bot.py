import aiohttp
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# -----------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ config.json
# -----------------------------
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

TELEGRAM_TOKEN = config["TELEGRAM_TOKEN"]
OPENROUTER_API_KEY = config["OPENROUTER_API_KEY"]

# -----------------------------
# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
# -----------------------------
FREE_MODELS = {
    "Mistral 7B": "mistralai/mistral-7b-instruct:free",
    "Gemma 3 12B": "google/gemma-3-12b-it:free",
    "DeepSeek R1": "deepseek/deepseek-r1:free",
    "Qwen 2.5 32B": "qwen/qwen2.5-vl-32b-instruct:free",
}

# -----------------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–∏—Ö –º–æ–¥–µ–ª–µ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö inline-—Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
user_model = {}
last_inline_msg = {}

# -----------------------------
# –ü–∞–ø–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
# -----------------------------
HISTORY_DIR = "user_histories"
os.makedirs(HISTORY_DIR, exist_ok=True)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
# -----------------------------
def get_user_file(user_id):
    return os.path.join(HISTORY_DIR, f"{user_id}.json")

def load_history(user_id):
    file = get_user_file(user_id)
    if os.path.exists(file):
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_history(user_id, history):
    file = get_user_file(user_id)
    with open(file, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

# -----------------------------
# Inline-–º–µ–Ω—é —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
# -----------------------------
def get_inline_menu(selected_model=None):
    builder = InlineKeyboardBuilder()
    for name, model_id in FREE_MODELS.items():
        label = f"‚úÖ {name}" if model_id == selected_model else name
        builder.button(text=label, callback_data=f"model:{model_id}")
    builder.adjust(2)
    return builder.as_markup()

# -----------------------------
# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
# -----------------------------
def get_reply_keyboard():
    kb = [
        [KeyboardButton("Mistral 7B"), KeyboardButton("Gemma 3 12B")],
        [KeyboardButton("DeepSeek R1"), KeyboardButton("Qwen 2.5 32B")],
        [KeyboardButton("/clear")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# -----------------------------
# /start
# -----------------------------
@dp.message(F.text == "/start")
async def start(message: types.Message):
    user_id = message.from_user.id
    current_model = user_model.get(user_id)

    inline_msg = await message.answer(
        "üëã –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è (inline-–º–µ–Ω—é):",
        reply_markup=get_inline_menu(current_model)
    )
    last_inline_msg[user_id] = inline_msg.message_id

    await message.answer(
        "üëá –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞:",
        reply_markup=get_reply_keyboard()
    )

# -----------------------------
# Inline –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
# -----------------------------
@dp.callback_query(F.data.startswith("model:"))
async def inline_model_select(callback: types.CallbackQuery):
    model_id = callback.data.split("model:")[1]
    user_id = callback.from_user.id
    user_model[user_id] = model_id
    save_history(user_id, [])  # –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏

    await callback.answer("–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ ‚úÖ")

    msg_id = last_inline_msg.get(user_id)
    if msg_id:
        await bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=msg_id,
            reply_markup=get_inline_menu(selected_model=model_id)
        )

# -----------------------------
# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
# -----------------------------
@dp.message(F.text.in_(FREE_MODELS.keys()))
async def reply_model_select(message: types.Message):
    name = message.text
    model_id = FREE_MODELS[name]
    user_id = message.from_user.id
    user_model[user_id] = model_id
    save_history(user_id, [])

    msg_id = last_inline_msg.get(user_id)
    if msg_id:
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=msg_id,
            reply_markup=get_inline_menu(selected_model=model_id)
        )

    await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {name}")

# -----------------------------
# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# -----------------------------
@dp.message(F.text == "/clear")
async def clear_context(message: types.Message):
    user_id = message.from_user.id
    save_history(user_id, [])
    await message.answer("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω!")

# -----------------------------
# /help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
# -----------------------------
@dp.message(F.text == "/help")
async def show_help(message: types.Message):
    help_text = """
üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
/menu - –ø–æ–∫–∞–∑–∞—Ç—å inline-–º–µ–Ω—é –º–æ–¥–µ–ª–µ–π –∑–∞–Ω–æ–≤–æ

–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é:
/mistral - –≤—ã–±—Ä–∞—Ç—å Mistral 7B
/gemma - –≤—ã–±—Ä–∞—Ç—å Gemma 3 12B
/deepseek - –≤—ã–±—Ä–∞—Ç—å DeepSeek R1
/qwen - –≤—ã–±—Ä–∞—Ç—å Qwen 2.5 32B

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.
"""
    await message.answer(help_text)

# -----------------------------
# /menu - –ø–æ–∫–∞–∑–∞—Ç—å inline-–º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
# -----------------------------
@dp.message(F.text == "/menu")
async def show_menu(message: types.Message):
    user_id = message.from_user.id
    current_model = user_model.get(user_id)
    inline_msg = await message.answer(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è (inline-–º–µ–Ω—é):",
        reply_markup=get_inline_menu(current_model)
    )
    last_inline_msg[user_id] = inline_msg.message_id

# -----------------------------
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
# -----------------------------
@dp.message(F.text == "/mistral")
async def select_mistral(message: types.Message):
    await select_model_command(message, "Mistral 7B")

@dp.message(F.text == "/gemma")
async def select_gemma(message: types.Message):
    await select_model_command(message, "Gemma 3 12B")

@dp.message(F.text == "/deepseek")
async def select_deepseek(message: types.Message):
    await select_model_command(message, "DeepSeek R1")

@dp.message(F.text == "/qwen")
async def select_qwen(message: types.Message):
    await select_model_command(message, "Qwen 2.5 32B")

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
# -----------------------------
async def select_model_command(message: types.Message, name: str):
    model_id = FREE_MODELS[name]
    user_id = message.from_user.id
    user_model[user_id] = model_id
    save_history(user_id, [])
    await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {name}")

    # –û–±–Ω–æ–≤–ª—è–µ–º inline-–º–µ–Ω—é
    msg_id = last_inline_msg.get(user_id)
    if msg_id:
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=msg_id,
            reply_markup=get_inline_menu(selected_model=model_id)
        )

# -----------------------------
# –û–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é
# -----------------------------
@dp.message()
async def chat_with_model(message: types.Message):
    user_id = message.from_user.id
    model = user_model.get(user_id)
    if not model:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /start")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
    await bot.send_chat_action(message.chat.id, "typing")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = load_history(user_id)
    history.append({"role": "user", "content": message.text})

    # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
            },
            json={"model": model, "messages": history},
        ) as response:
            result = await response.json()

    try:
        reply = result["choices"][0]["message"]["content"]
    except:
        reply = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."

    # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.answer(reply)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "assistant", "content": reply})
    save_history(user_id, history)

# -----------------------------
# –ó–∞–ø—É—Å–∫
# -----------------------------
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
